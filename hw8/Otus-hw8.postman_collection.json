{
	"info": {
		"_postman_id": "b0fa2cf5-cded-491c-a822-f47d313a180c",
		"name": "Otus-hw8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18960738"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "register new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"User\",\n\t\"lastName\": \"Userov\",\n\t\"email\": \"User5@user.com\",\n\t\"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/users/register",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access without creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/users/current/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"users",
								"current",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get registered user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response body\", function () {",
									"    var expectedResponse = {",
									"    \"firstName\": \"User\",",
									"    \"lastName\": \"Userov\",",
									"    \"email\": \"User5@user.com\",",
									"    \"password\": \"secured\",",
									"    \"role\": \"ROLE_USER\"",
									"};",
									"",
									"    pm.response.to.have.jsonBody(expectedResponse);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/users/current/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"users",
								"current",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"UpdatedData\",\n\t\"lastName\": \"UpdatedData\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/users/current/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"users",
								"current",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "check update user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body({",
									"    \"firstName\": \"UpdatedData\",",
									"    \"lastName\": \"UpdatedData\",",
									"    \"email\": \"User5@user.com\",",
									"    \"password\": \"secured\",",
									"    \"role\": \"ROLE_USER\"",
									"});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"UpdatedData\",\n\t\"lastName\": \"UpdatedData\"\n}"
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/users/current/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"users",
								"current",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "create new order unauth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Use@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\",\n    \"price\": 1000,\n    \"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create new order auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body(\"Custom Error: Idempotence key missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\",\n    \"price\": 1000,\n    \"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "generate idempotence key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    let key = pm.response.text();",
									"    pm.collectionVariables.set(\"key\", key);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/generateIKey",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								"generateIKey"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order with auth and IKey not enough money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Order: 'items' with price 1000$ for user User5@user.com start processing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-idempotence-key",
								"value": "{{key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\",\n    \"price\": 1000,\n    \"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create order with auth and  wrong IKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body(\"Custom Error: Wrong idempotence key\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-idempotence-key",
								"value": "{{key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\",\n    \"price\": 1000,\n    \"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders for current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assuming your expected values",
									"const expDescription = \"headphones\";",
									"const expStatus = \"CANCELLED\";",
									"",
									"// Actual response from the API",
									"const actualResponse = pm.response.json();",
									"",
									"// Check if there is an item with the specified name and amount",
									"pm.test('Response contains', function () {",
									"  const matchingItem = actualResponse.find(item => item.description === expDescription && item.status === expStatus);",
									"",
									"  // Check if a matching item was found",
									"  pm.expect(matchingItem).to.not.be.undefined;",
									"",
									"  // Additional checks for the matching item properties",
									"  pm.expect(matchingItem.description).to.eql(expDescription);",
									"  pm.expect(matchingItem.status).to.eql(expStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "billing",
			"item": [
				{
					"name": "get billing account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/billing/account",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"billing",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "deposit money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 5000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/billing/deposit",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"billing",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "withdraw money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": 1000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/billing/withdraw",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"billing",
								"withdraw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "orders-2",
			"item": [
				{
					"name": "generate idempotence key Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    let key = pm.response.text();",
									"    pm.collectionVariables.set(\"key\", key);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User7@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8001/orders/generateIKey",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"orders",
								"generateIKey"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order with auth and IKey No Item In Stock Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"price 100$ for user User5@user.com start processing at\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-idempotence-key",
								"value": "{{key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"headphones\",\n\t\"price\": 100,\n\t\"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders check status delivery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assuming your expected values",
									"const expDescription = \"headphones\";",
									"const expStatus = \"DELIVERY\";",
									"",
									"// Actual response from the API",
									"const actualResponse = pm.response.json();",
									"",
									"// Check if there is an item with the specified name and amount",
									"pm.test('Response contains', function () {",
									"  const matchingItem = actualResponse.find(item => item.description === expDescription && item.status === expStatus);",
									"",
									"  // Check if a matching item was found",
									"  pm.expect(matchingItem).to.not.be.undefined;",
									"",
									"  // Additional checks for the matching item properties",
									"  pm.expect(matchingItem.description).to.eql(expDescription);",
									"  pm.expect(matchingItem.status).to.eql(expStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "generate idempotence key Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    let key = pm.response.text();",
									"    pm.collectionVariables.set(\"key\", key);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User7@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8001/orders/generateIKey",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"orders",
								"generateIKey"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order with auth and IKey No Item In Stock Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"price 100$ for user User5@user.com start processing at\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-idempotence-key",
								"value": "{{key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"headphones\",\n\t\"price\": 100,\n\t\"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders/",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders check status cancelled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assuming your expected values",
									"const expDescription = \"headphones\";",
									"const expStatus = \"CANCELLED\";",
									"",
									"// Actual response from the API",
									"const actualResponse = pm.response.json();",
									"",
									"// Check if there is an item with the specified name and amount",
									"pm.test('Response contains', function () {",
									"  const matchingItem = actualResponse.find(item => item.description === expDescription && item.status === expStatus);",
									"",
									"  // Check if a matching item was found",
									"  pm.expect(matchingItem).to.not.be.undefined;",
									"",
									"  // Additional checks for the matching item properties",
									"  pm.expect(matchingItem.description).to.eql(expDescription);",
									"  pm.expect(matchingItem.status).to.eql(expStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/orders",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Warehouse",
			"item": [
				{
					"name": "Warehouse getAll no headphones in stock Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedResponse = [",
									"  {",
									"    \"id\": \"89e57aae-46d7-4018-8f1e-829170e32aaa\",",
									"    \"name\": \"phone\",",
									"    \"amount\": 3",
									"  },",
									"  {",
									"    \"id\": \"ec548a7a-106f-4769-971c-a3acb8908c2b\",",
									"    \"name\": \"laptop\",",
									"    \"amount\": 3",
									"  },",
									"  {",
									"    \"id\": \"2c0d2c78-5d21-4d83-8826-1f75bc61e9cf\",",
									"    \"name\": \"headphones\",",
									"    \"amount\": 0",
									"  }",
									"];",
									"",
									"// Actual response from the API",
									"const actualResponse = pm.response.json();",
									"",
									"// Check if the response is an array",
									"pm.test('Response is an array', function () {",
									"  pm.expect(actualResponse).to.be.an('array');",
									"});",
									"",
									"// Check if the response length is equal to the expected length",
									"pm.test('Response length is correct', function () {",
									"  pm.expect(actualResponse.length).to.eql(expectedResponse.length);",
									"});",
									"",
									"// Check each item in the array",
									"expectedResponse.forEach((expectedItem, index) => {",
									"  pm.test(`Item ${index + 1} is correct`, function () {",
									"    const actualItem = actualResponse[index];",
									"",
									"    // Check the properties of each item",
									"    pm.expect(actualItem.id).to.eql(expectedItem.id);",
									"    pm.expect(actualItem.name).to.eql(expectedItem.name);",
									"    pm.expect(actualItem.amount).to.eql(expectedItem.amount);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/otusapp/victoria/warehouse",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"victoria",
								"warehouse"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "saga delivery cancel",
			"item": [
				{
					"name": "generate idempotence key Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    let key = pm.response.text();",
									"    pm.collectionVariables.set(\"key\", key);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"items\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8001/orders/generateIKey",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"orders",
								"generateIKey"
							]
						}
					},
					"response": []
				},
				{
					"name": "create order saga delivery cancel Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"price 100$ for user User7@user.com start processing at\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-idempotence-key",
								"value": "{{key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"phone\",\n\t\"price\": 100,\n\t\"address\": \"Moscow, Greena\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8001/orders/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders check status cancelled Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assuming your expected values",
									"const expDescription = \"phone\";",
									"const expStatus = \"CANCELLED\";",
									"",
									"// Actual response from the API",
									"const actualResponse = pm.response.json();",
									"",
									"// Check if there is an item with the specified name and amount",
									"pm.test('Response contains', function () {",
									"  const matchingItem = actualResponse.find(item => item.description === expDescription && item.status === expStatus);",
									"",
									"  // Check if a matching item was found",
									"  pm.expect(matchingItem).to.not.be.undefined;",
									"",
									"  // Additional checks for the matching item properties",
									"  pm.expect(matchingItem.description).to.eql(expDescription);",
									"  pm.expect(matchingItem.status).to.eql(expStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "User5@user.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8001/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "i_key",
			"value": ""
		},
		{
			"key": "key",
			"value": ""
		}
	]
}